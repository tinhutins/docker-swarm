---
# - name: Set frontend proxy servers hosts file
#   template:
#     src: hosts_file.j2
#     dest: /etc/hosts

# - name: Register debian destribution
#   shell: lsb_release -cs
#   register: lsb_release
#   when: ansible_os_family == "Debian"

# - name: Register debian arhitecture
#   shell: dpkg --print-architecture
#   register: arch
#   when: ansible_os_family == "Debian"

# - name: Install additional packages
#   package:
#     name:
#       - python3-pip
#     state: latest

# - name: Remove docker packages if already installed
#   apt:
#     name: "docker*"
#     state: absent

# - name: Remove docker files if they exist
#   file:
#     name: "{{ item }}"
#     state: absent
#   loop:
#     - '/var/lib/docker'
#     - '/var/run/docker.sock'
#     - '/usr/bin/docker-compose'

# - name: Remove podman packages if already installed
#   apt:
#     name: "podman*"
#     state: absent
#   ignore_errors: True

# # Reboot after docker/podman is removed
# - name: Reboot host
#   reboot:
#     connect_timeout: "{{ reboot_connect_timeout }}"
#     post_reboot_delay: "{{ reboot_post_reboot_delay }}"
#     reboot_timeout: "{{ reboot_timeout }}"

# # Docker/Podman
# # Only specific versions of podman works with ceph versions more on https://docs.ceph.com/en/latest/cephadm/compatibility/
# - name: Install container engine
#   block:
#     - name: Install docker
#       when: ansible_facts['distribution_version'] is version('22.04', '<=')
#       block:
#         - name: Add an apt docker signing key
#           ansible.builtin.apt_key:
#             url: https://download.docker.com/linux/ubuntu/gpg
#             state: present
#             keyring: /usr/share/keyrings/docker-archive-keyring.gpg

#         - name: Add specified repository into sources list
#           ansible.builtin.apt_repository:
#             repo: "deb [arch={{ arch.stdout }} signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu {{ lsb_release.stdout }} stable"
#             state: present
#             filename: docker

#         - name: Create docker configuration directory
#           file:
#             path: /etc/docker
#             state: directory
#             mode: '0700'

#         - name: Create docker containers directory
#           file:
#             path: /root/haproxy
#             state: directory
#             mode: '0700'

#         - name: Copy docker-compose configuration
#           ansible.builtin.template:
#             src: "docker-compose.j2"
#             dest: "/root/haproxy/docker-compose.yml"
#             owner: root
#             group: root
#             mode: u=rw,g=rw,o=r

#         - name: Copy docker related configuration files
#           copy:
#             src: "{{ item.src }}"
#             dest: "/etc/{{ item.dest }}"
#             owner: root
#             group: root
#             mode: '0644'
#           loop:
#             - { src: 'docker/daemon.json', dest: 'docker/daemon.json' }
#             - { src: 'docker/docker-logrotate.conf', dest: 'logrotate.d/docker.conf' }
#             - { src: 'docker/docker-rsyslog.conf', dest: 'rsyslog.d/10-docker.conf' }
        
#         - name: Install or upgrade pip packages
#           pip:
#             name:
#               - docker=={{ pip_docker_version }}
#               - docker-compose=={{ pip_docker_compose_version }}
#             executable: pip3

#         - name: Install docker-compose
#           get_url:
#             url: "https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-linux-x86_64"
#             dest: /usr/bin/docker-compose
#             mode: '0744'

#         - name: Install docker packages
#           apt:
#             name: "{{ docker_ce_version }}"
#             state: present
#             update_cache: yes

#         - name: Get running containers
#           docker_host_info:
#             containers: yes
#           register: docker_info

#         - name: Destroy stopped containers
#           docker_container:
#             name: "{{ item }}"
#             state: absent
#           loop: "{{ docker_info.containers | map(attribute='Id') | list }}"

#     - name: Install podman
#       when: ansible_facts['distribution_version'] is version('22.04', '>')
#       block:
#         - name: Install podman package
#           apt:
#             name: podman
#             state: present
#             update_cache: yes

# # Reboot after docker/podman is installed
# - name: Reboot host
#   reboot:
#     connect_timeout: "{{ reboot_connect_timeout }}"
#     post_reboot_delay: "{{ reboot_post_reboot_delay }}"
#     reboot_timeout: "{{ reboot_timeout }}"

# HAProxy frontend proxy
- name: Gather haproxy upstream facts
  setup:
  delegate_to: "{{item}}"
  delegate_facts: true
  with_items:
    - "{{groups ['managers']}}"
    - "{{groups['workers']}}"
  ignore_unreachable: true
  tags: haproxy_config_update

- name: Copy haproxy configuration from templates
  template:
    src: "haproxy-config.j2"
    dest: "/root/haproxy/haproxy.cfg"
    owner: root
    group: root
    mode: '0755'

- name: Create and start haproxy container
  community.docker.docker_compose:
    project_src: /root/haproxy
    services:
      - haproxy
    state: present
  register: output

- name: Restart haproxy container
  community.docker.docker_compose:
    project_src: /root/haproxy
    services:
      - haproxy
    restarted: true
  tags: ['never', 'haproxy_config_update']
